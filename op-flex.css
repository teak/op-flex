/*

MIT License

Copyright (c) 2024 Bioregional Education Association

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


/* configure vars */
.op-flex {
    --op-flex-gap-vertical: 10px;
    --op-flex-gap-horizontal: 10px;
    --op-flex-split-colour: #ddd;
    --op-flex-split-width: 1px;
}


/* reset flex items */
.op-flex > * {
    flex-grow: 0;
    flex-shrink: 1;
}


/* alignment properties for items */
.op-flex > .flex-align-self-start {
    align-self: flex-start;
}

.op-flex > .flex-align-self-end {
    align-self: flex-end;
}

.op-flex > .flex-align-self-center {
    align-self: center;
}

.op-flex > .flex-align-self-stretch {
    align-self: stretch;
}

.op-flex > .flex-align-self-baseline {
    align-self: baseline;
}

.op-flex > .flex-align-self-normal {
    align-self: normal;
}


/* stretch items to create equal width columns */
.op-flex.flex-stretch > * {
    flex-basis: 0px;
    flex-grow: 1;
}

.op-flex.flex-stretch:not(.flex-vertical),
.op-flex.flex-stretch:not(.flex-vertical) > * {
    width: 100%;
}

.op-flex .op-flex.flex-stretch:not(.flex-vertical) {
    width: auto;
}

.op-flex.flex-stretch.flex-vertical,
.op-flex.flex-stretch.flex-vertical > * {
    height: 100%;
}

.op-flex .op-flex.flex-stretch.flex-vertical {
    height: auto;
}


/* general flex properties for items */
.op-flex.flex-grow-all > * {
    flex-grow: 1;
}

.op-flex > .flex-base {
    flex-basis: 0px;
}

.op-flex > .flex-base-auto {
    flex-basis: auto;
}

.op-flex > .flex-grow {
    flex-grow: 1;
}

.op-flex > .flex-shrink {
    flex-shrink: 1;
}

.op-flex > .flex-grow-none {
    flex-grow: 0;
}

.op-flex > .flex-shrink-none {
    flex-shrink: 0;
}


/* apply a gap, deliberately using the opposite side than 'flex-gap' */
.op-flex.flex-pad > *,
.op-flex.flex-pad-vertical > * {
    margin-bottom: var(--op-flex-gap-vertical);
}

.op-flex.flex-pad > *,
.op-flex.flex-pad-horizontal > * {
    margin-right: var(--op-flex-gap-horizontal);
}


/* apply padding to only top/left of container, letting the margins handle bottom/right */
.op-flex.flex-pad,
.op-flex.flex-pad-vertical {
    padding-top: var(--op-flex-gap-vertical);
    padding-bottom: 0px;
}

.op-flex.flex-pad,
.op-flex.flex-pad-horizontal {
    padding-left: var(--op-flex-gap-horizontal);
    padding-right: 0px;
}


/* remove pad from single items */
.op-flex > .flex-pad-none,
.op-flex.flex-pad > .flex-pad-none,
.op-flex > .flex-pad-vertical-none,
.op-flex.flex-pad > .flex-pad-vertical-none {
    margin-bottom: 0px;
}

.op-flex > .flex-pad-none,
.op-flex.flex-pad > .flex-pad-none,
.op-flex > .flex-pad-horizontal-none,
.op-flex.flex-pad > .flex-pad-horizontal-none {
    margin-right: 0px;
}


/* apply pad to single items */
.op-flex.flex-pad-top,
.op-flex > .flex-pad-top {
    padding-top: var(--op-flex-gap-vertical);
}

.op-flex.flex-pad-left,
.op-flex > .flex-pad-left {
    padding-left: var(--op-flex-gap-horizontal);
}

.op-flex.flex-pad-bottom,
.op-flex > .flex-pad-bottom {
    padding-bottom: var(--op-flex-gap-vertical);
}

.op-flex.flex-pad-right,
.op-flex > .flex-pad-right {
    padding-right: var(--op-flex-gap-horizontal);
}

.op-flex > .flex-pad-self-vertical {
    padding-top: var(--op-flex-gap-vertical);
    padding-bottom: var(--op-flex-gap-vertical);
}

.op-flex > .flex-pad-self-horizontal {
    padding-left: var(--op-flex-gap-horizontal);
    padding-right: var(--op-flex-gap-horizontal);
}


/* apply gap to all but the first child */
.op-flex.flex-gap.flex-vertical > *:not(:first-child),
.op-flex.flex-gap-vertical > *:not(:first-child) {
    margin-top: var(--op-flex-gap-vertical);
}

.op-flex.flex-gap:not(.flex-vertical) > *:not(:first-child),
.op-flex.flex-gap-horizontal > *:not(:first-child) {
    margin-left: var(--op-flex-gap-horizontal);
}


/* apply negative margins to container only when also using 'flex-wrap' */
.op-flex.flex-gap.flex-wrap {
    margin-top: calc(-1 * var(--op-flex-gap-vertical));
    margin-left: calc(-1 * var(--op-flex-gap-horizontal));
}

.op-flex.flex-gap.flex-wrap > * {
    margin-top: var(--op-flex-gap-vertical);
    margin-left: var(--op-flex-gap-horizontal);
}


/* remove gap from single items */
.op-flex.flex-vertical > .flex-gap-none,
.op-flex.flex-gap.flex-vertical > .flex-gap-none,
.op-flex > .flex-gap-vertical-none,
.op-flex.flex-gap > .flex-gap-vertical-none {
    margin-top: 0px;
}

.op-flex:not(.flex-vertical) > .flex-gap-none,
.op-flex.flex-gap:not(.flex-vertical) > .flex-gap-none,
.op-flex > .flex-gap-horizontal-none,
.op-flex.flex-gap > .flex-gap-horizontal-none {
    margin-left: 0px;
}


/* apply gap to single items */
.op-flex > .flex-gap-top {
    margin-top: var(--op-flex-gap-vertical);
}

.op-flex > .flex-gap-left {
    margin-left: var(--op-flex-gap-horizontal);
}

.op-flex > .flex-gap-bottom {
    margin-bottom: var(--op-flex-gap-vertical);
}

.op-flex > .flex-gap-right {
    margin-right: var(--op-flex-gap-horizontal);
}


/* push items using auto margins. applied here to override gaps */
.op-flex.flex-vertical > .flex-top,
.op-flex.flex-pad.flex-vertical > .flex-top,
.op-flex.flex-vertical:not(.flex-reverse) > .flex-self-start,
.op-flex.flex-vertical.flex-reverse > .flex-self-end {
    margin-bottom: auto;
}

.op-flex:not(.flex-vertical) > .flex-left,
.op-flex.flex-pad:not(.flex-vertical) > .flex-left,
.op-flex:not(.flex-vertical):not(.flex-reverse) > .flex-self-start,
.op-flex:not(.flex-vertical).flex-reverse > .flex-self-end {
    margin-right: auto;
}

.op-flex.flex-vertical > .flex-bottom,
.op-flex.flex-gap.flex-vertical > .flex-bottom,
.op-flex.flex-vertical:not(.flex-reverse) > .flex-self-end,
.op-flex.flex-vertical.flex-reverse > .flex-self-start {
    margin-top: auto;
}

.op-flex:not(.flex-vertical) > .flex-right,
.op-flex.flex-gap:not(.flex-vertical) > .flex-right,
.op-flex:not(.flex-vertical):not(.flex-reverse) > .flex-self-end,
.op-flex:not(.flex-vertical).flex-reverse > .flex-self-start {
    margin-left: auto;
}


/* split borders between items */
.op-flex.flex-split.flex-vertical > *:not(:last-child) {
    border-bottom: solid var(--op-flex-split-width) var(--op-flex-split-colour);
}

.op-flex.flex-split.flex-gap.flex-vertical > *:not(:last-child),
.op-flex.flex-split.flex-pad.flex-vertical > *:not(:last-child) {
    padding-bottom: var(--op-flex-gap-vertical);
}

.op-flex.flex-split:not(.flex-vertical) > *:not(:last-child) {
    border-right: solid var(--op-flex-split-width) var(--op-flex-split-colour);
}

.op-flex.flex-split.flex-gap:not(.flex-vertical) > *:not(:last-child),
.op-flex.flex-split.flex-pad:not(.flex-vertical) > *:not(:last-child) {
    padding-right: var(--op-flex-gap-horizontal);
}


/* invisible separator elements, used in place of auto margins on items */
.op-flex > .flex-space {
    margin: auto;
    padding: 0px;
    width: 0px;
    height: 0px;
    visibility: hidden;
}


/* default flex properties, for resetting items nested within other 'op-flex' containers */
.op-flex {
    display: flex;
    flex-basis: auto;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: normal;
    justify-content: normal;
    min-width: 0px;
    min-height: 0px;
}


/* special flex properties that control flow */
.op-flex.flex-vertical {
    flex-direction: column;
}

.op-flex.flex-reverse {
    flex-direction: row-reverse;
}

.op-flex.flex-vertical.flex-reverse {
    flex-direction: column-reverse;
}

.op-flex.flex-wrap {
    flex-wrap: wrap;
}

.op-flex:not(.flex-vertical).flex-wide {
    width: 100%;
}

.op-flex.flex-vertical.flex-wide {
    height: 100%;
}


/* apply both justify and align in 'flex-center', for convenience */
.op-flex.flex-center {
    justify-content: center;
    align-items: center;
}


/* container level justification properties. the 'just' keyword is left out of most selectors for ease of use */
.op-flex.flex-start {
    justify-content: flex-start;
}

.op-flex.flex-end {
    justify-content: flex-end;
}

.op-flex.flex-between {
    justify-content: space-between;
}

.op-flex.flex-even {
    justify-content: space-evenly;
}

.op-flex.flex-around {
    justify-content: space-around;
}

.op-flex.flex-just-center {
    justify-content: center;
}

.op-flex.flex-just-stretch {
    justify-content: stretch;
}

.op-flex.flex-just-normal {
    justify-content: normal;
}


/* container level alignment properties */
.op-flex.flex-align-start {
    align-items: flex-start;
}

.op-flex.flex-align-end {
    align-items: flex-end;
}

.op-flex.flex-align-center {
    align-items: center;
}

.op-flex.flex-align-stretch {
    align-items: stretch;
}

.op-flex.flex-align-baseline {
    align-items: baseline;
}

.op-flex.flex-align-normal {
    align-items: normal;
}
